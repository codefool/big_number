#pragma once

#include <iostream>
#include <cstring>
#include <cctype>
#include <memory>

#include "buildinfo.h"

class big_number {
public:
    static const size_t B_SIZE = 2048;
    typedef signed char digit_t;
    typedef digit_t buff_t[B_SIZE];

private:
    bool                    s;  // true negative, false positive
    short                   m;  // maginitude
    std::shared_ptr<buff_t> b;
    // digit_t b[B_SIZE];

public:
    big_number();
    big_number(const big_number& other);
    big_number(std::string num);

    inline int sign() const {
        return s ? -1 : 1;
    }

    big_number negate() const {
        auto ret(*this);
        ret.s = !s;
        return ret;
    }

    bool is_negative() const {
        return s;
    }

    bool is_positive() const {
        return !s;
    }

    inline const size_t size() const {
        return m;
    }       

    inline const digit_t *c_get() const {
        return b.get();
    }

    // answer -1 if lhs < rhs, 0 if lhs == rhs, and 1 if lhs > rhs
    int compare(const big_number& rhs) const;

    bool operator==(const big_number& rhs) const {
        return compare(rhs) == 0;
    }

    bool operator<(const big_number& rhs) const {
        return compare(rhs) < 0;
    }

    bool operator<=(const big_number& rhs) const {
        return compare(rhs) <= 0;
    }

    bool operator>(const big_number& rhs) const {
        return compare(rhs) > 0;
    }

    bool operator>=(const big_number& rhs) const {
        return compare(rhs) >= 0;
    }

    digit_t& operator[](size_t index) {
        return b[index];
    }

    big_number operator+(const big_number& rhs) const;
    big_number add(const big_number& rhs) const;

    big_number operator-(const big_number& rhs) const;
    big_number sub_method_one(const big_number&rhs) const;
    big_number sub_method_two(const big_number& rhs) const;
    big_number sub_method_diff_magn(const big_number& rhs) const;

    big_number nines_complement(size_t len) const;

    big_number& strip_leading(digit_t dig = 0);

    friend std::ostream& operator<<(std::ostream& os, big_number& obj);

private:
    void append(digit_t digit);

    digit_t *get() {
        return b.get();
    }
public:
    static big_number ONE;
};
